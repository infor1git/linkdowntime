{% set no_header = true %}
{% set no_inventory_footer = true %}
{% import 'components/form/fields_macros.html.twig' as fields %}

<div class="asset">
   <form name="form"
      method="post"
      action="{{ item.getFormURL() ~ '?redirect=1' }}"
      data-track-changes="true"
      enctype="multipart/form-data">
      
      {# Campos ocultos obrigatórios #}
      <input type="hidden" name="name" value="{{ item.fields['name'] }}" />
      <input type="hidden" name="users_id" value="{{ item.fields['users_id'] ?: session('glpiID') }}" />
      <input type="hidden" name="entities_id" value="{{ item.fields['entities_id'] ?: session('glpiactive_entity') }}" />
      <input type="hidden" name="is_recursive" value="{{ item.fields['is_recursive'] }}" />
      <input type="hidden" name="id" value="{{ item.fields['id'] }}" />
      <input type="hidden" name="_glpi_csrf_token" value="{{ csrf_token() }}" />

      {# Pegar tickets_id do GET se estiver criando via chamado, ou do próprio registro se existe #}
      {% set ticket_input_value = params.tickets_id ?? item.fields['tickets_id'] ?? '' %}
      {% if ticket_input_value %}
         <input type="hidden" name="tickets_id" value="{{ ticket_input_value }}" />
      {% endif %}
      
      {# Container principal #}
      <div class="row">
         <div class="col-12">
            <div class="card">
               <div class="card-header d-flex justify-content-between align-items-center">
               <h4 class="mb-0">
                  <i class="fas fa-network-wired"></i>&nbsp; {{ __('Link Downtime Manager', 'linkdowntime') }}
               </h4>
               {% if get.tickets_id is defined %}
                  <p class="text-muted mb-0">
                     <i class="fas fa-ticket-alt"></i>&nbsp;
                     {{ __('Creating downtime for ticket:', 'linkdowntime') }} #{{ get.tickets_id }}
                  </p>
               {% endif %}
               </div>
               
               <div class="card-body">
                  {# Chamado Relacionado - APENAS se não veio via GET #}
                  {% if not get.tickets_id is defined %}
                  <div class="mb-3">
                     {% set tickets_list = call('PluginLinkdowntimeDowntime::getTicketsDropdown') %}
                     {{ fields.dropdownArrayField(
                        'tickets_id',
                        item.fields['tickets_id'],
                        tickets_list,
                        __('Related Ticket', 'linkdowntime'),
                        {
                           'display_emptychoice': true
                        }
                     ) }}
                  </div>
                  {% endif %}

                  {# Localização - OBRIGATÓRIO #}
                  <div class="mb-3">
                     {{ fields.dropdownField(
                        'Location',
                        'locations_id',
                        item.fields['locations_id'],
                        __('Location')|e,
                        {
                           'entity': item.fields['entities_id'],
                           'entity_sons': true,
                           'required': true
                        }
                     ) }}
                  </div>

                  {# Fornecedor - OBRIGATÓRIO #}
                  <div class="mb-3">
                     {% set suppliers_with_tag = call('PluginLinkdowntimeDowntime::getSuppliersWithTag') %}
                     {{ fields.dropdownArrayField(
                        'suppliers_id',
                        item.fields['suppliers_id'],
                        suppliers_with_tag,
                        __('Supplier')|e,
                        {
                           'display_emptychoice': true,
                           'required': true
                        }
                     ) }}
                  </div>

                  {# Data/Hora de Início - OBRIGATÓRIO #}
                  <div class="mb-3">
                     {{ fields.datetimeField(
                        'start_datetime',
                        item.fields['start_datetime'],
                        __('Start Date/Time', 'linkdowntime')|e,
                        {
                           'required': true
                        }
                     ) }}
                  </div>

                  {# Data/Hora de Fim #}
                  <div class="mb-3">
                     {{ fields.datetimeField(
                        'end_datetime',
                        item.fields['end_datetime'],
                        __('End Date/Time', 'linkdowntime')|e,
                        {}
                     ) }}
                  </div>

                  {# Data/Hora da Comunicação #}
                  <div class="mb-3">
                     {{ fields.datetimeField(
                        'communication_datetime',
                        item.fields['communication_datetime'],
                        __('Communication Date/Time', 'linkdowntime')|e,
                        {}
                     ) }}
                  </div>

                  {# Observações #}
                  <div class="mb-3">
                     {{ fields.textareaField(
                        'observation',
                        item.fields['observation'],
                        __('Observation', 'linkdowntime')|e,
                        {
                           'enable_richtext': true,
                           'rows': 6
                        }
                     ) }}
                  </div>

                  {# Aviso de campos obrigatórios #}
                  <div class="alert alert-info">
                     <i class="fas fa-info-circle"></i>&nbsp;
                     <strong>{{ __('Required fields', 'linkdowntime') }}:</strong>
                     {{ __('Location') }}, {{ __('Supplier') }}, {{ __('Start Date/Time', 'linkdowntime') }}
                  </div>

                  {# Botões de ação #}
                  <div class="d-flex justify-content-between">
                     <div>
                        {% if not item.isNewID(item.fields['id']) and item.canUpdateItem() %}
                           <button type="submit" name="delete" value="1" class="btn btn-danger" 
                                   onclick="return confirm('{{ __('Confirm the final deletion?')|e }}')">
                              <i class="fas fa-trash"></i>&nbsp; {{ __('Delete permanently') }}
                           </button>
                        {% endif %}
                     </div>
                     
                     <div>
                        {% set ticket_id = item.fields['tickets_id']|default(0) %}

                        {% if ticket_id > 0 %}
                           <a href="/front/ticket.form.php?id={{ ticket_id }}&forcetab=PluginLinkdowntimeDowntime$1"
                              class="btn btn-secondary me-2">
                              <i class="fas fa-arrow-left"></i>&nbsp; {{ __('Back to Ticket', 'linkdowntime') }}
                           </a>
                        {% endif %}
                        
                        {% if item.isNewID(item.fields['id']) %}
                           <button type="submit" name="add" value="1" class="btn btn-primary">
                              <i class="fas fa-plus"></i>&nbsp; {{ __('Add') }}
                           </button>
                        {% else %}
                           <button type="submit" name="update" value="1" class="btn btn-primary">
                              <i class="fas fa-save"></i>&nbsp; {{ __('Update') }}
                           </button>
                        {% endif %}
                     </div>
                  </div>
               </div>
            </div>
         </div>
      </div>
   </form>
</div>

{# JavaScript para busca de chamados #}
<script>
document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('tickets_id_search');
    const hiddenInput = document.getElementById('tickets_id_hidden');
    const dropdown = document.getElementById('tickets_dropdown');
    const clearButton = document.getElementById('clear_ticket');
    
    let searchTimeout;
    
    if (searchInput) {
        // Busca de chamados
        searchInput.addEventListener('input', function() {
            const query = this.value;
            
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(() => {
                if (query.length >= 2) {
                    fetch('{{ config("root_doc") }}/plugins/linkdowntime/ajax/search_tickets.php', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                        },
                        body: 'query=' + encodeURIComponent(query)
                    })
                    .then(response => response.json())
                    .then(data => {
                        dropdown.innerHTML = '';
                        if (data.length > 0) {
                            data.forEach(ticket => {
                                const item = document.createElement('a');
                                item.className = 'dropdown-item';
                                item.href = '#';
                                item.innerHTML = `<strong>#${String(ticket.id).padStart(5, '0')}</strong> - ${ticket.name}`;
                                item.addEventListener('click', function(e) {
                                    e.preventDefault();
                                    searchInput.value = `#${String(ticket.id).padStart(5, '0')} - ${ticket.name}`;
                                    hiddenInput.value = ticket.id;
                                    dropdown.classList.remove('show');
                                });
                                dropdown.appendChild(item);
                            });
                            dropdown.classList.add('show');
                        } else {
                            dropdown.classList.remove('show');
                        }
                    });
                } else {
                    dropdown.classList.remove('show');
                }
            }, 300);
        });
        
        // Limpar seleção
        clearButton.addEventListener('click', function() {
            searchInput.value = '';
            hiddenInput.value = '';
            dropdown.classList.remove('show');
        });
        
        // Fechar dropdown ao clicar fora
        document.addEventListener('click', function(e) {
            if (!searchInput.contains(e.target) && !dropdown.contains(e.target)) {
                dropdown.classList.remove('show');
            }
        });
    }
});
</script>